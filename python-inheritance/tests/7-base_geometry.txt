import doctest
doctest.testfile('7-base_geometry.txt')

import from module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    
check instantiation:
    >>> bg = BaseGeometry()
    >>> isinstance(bg, BaseGeometry)
    True

test area():
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last)
    ...
    Exception: area() is not implemented

test integer_validator():
    >>> bg = BaseGeometry()
    Traceback (most recent call last):
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

test integer_validator("age"):
    >>> bg = BaseGeometry()
	Traceback (most recent call last):
	TypeError: integer_validator() missing 1 required positional argument: 'value'

test integer_validator("age", 1):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", 1)
    True

test integer_validator("age", 0):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last)
    ...
    ValueError: age must be greater than 0

test integer_validator("age", -4):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", -4)
    Traceback (most recent call last)
    ...
    ValueError: age must be greater than 0

test integer_validator("age", 4):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", 4)
    True

test integer_validator("age", (4,)):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", (4,))
    False

test integer_validator("age", [4]):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", [4])
    False

test integer_validator("age", True):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", True)
    False

test integer_validator("age", {3, 4}):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", {3, 4})
    False

test integer_validator("age", None):
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", None)
    False
